# TODO:
# - A monitor to make sure the tub is actually heating when the heater is on (else shut down & send alert) (if heater is on and heat goes down for 3 cycles in a row)
# - Retrieve target temp from ThingSpeak control channel
# - Implement things like target "as of"
# - See what happens if I shoot start.sh in the head then shut down the Pi (do relays stay on?)
# - Allow for maintenance schedule, and recurring target temps (e.g., 8am every weekday)
# - Mobile app to read temp and actuator state
# - Mobile app to allow setting of target temp
# - Mobile app to allow manual setting of relay states (exclude heater?)
# - Mobile app to allow management of maintenance schedule
# - Mobile app to allow management of recurring temperature targets
# - This app to accommodate all of those
# - Safety net: If we aren't able to contact ThingSpeak for <1h?> shut down everything
# - Or... have a safety net config as well - what do I do if I'm out of communication?
# - Rewire relays in series (not parallel) so we can manually shut off at the top side

import time
import sys
import Relays
import RelaySafety
import Thermometer
import ThingSpeakLogger
import Queue

DEBUG = False # Flip on to test toggled relay states, logging
READING_DELAY = 60 # seconds

TEMP_LIMIT = 103.0 # DO NOT CHANGE. IF YOU DO, DO NOT EVER SET HIGHER THAN 104.0!
TEMP_TARGET = 102.0
TEMP_SLOP = 0.5 # +/- window to regulate temperature; 8m every 2.4h @ 0.5F (5-6% duty cycle)

safety = RelaySafety.RelaySafety() # When this goes out of scope, destructor turns relays OFF
Relays.Init() # Set all relays to OFF as a starting state

q = Queue.Queue() # Temperature history queue (FIFO)

while DEBUG == False:
	# Read temp from DS18b20
	temperature = Thermometer.read_temp()
	q.enqueue(temperature)

	# Temperature safety check
	if temperature >= TEMP_LIMIT:
		Relays.HeaterOff()

	# Temperature regulation routine:
	if temperature >= TEMP_TARGET + TEMP_SLOP:
		Relays.HeaterOff()
	elif temperature <= TEMP_TARGET - TEMP_SLOP:
		Relays.HeaterOn()

	# Read pin states and send to data logger
        pinStates = Relays.GetAllStates() # Read current states of all hot tub $
        ThingSpeakLogger.WriteData(temperature, pinStates) # Log to ThingSpeak
        #targetState = ThingSpeakLogger.ReadControls()

        time.sleep(READING_DELAY) # Sleep 1 minute
	# TODO: This shouldn't be a 1-minute sleep. We should be checking
	# temperature constantly for limit control, and only sending to
	# the data logging service once per minute (or whatever)

while DEBUG:
        temperature = Thermometer.read_temp()
        Relays.HeaterOn()
        Relays.JetsOn()
        pinStates = Relays.GetAllStates()
        ThingSpeakLogger.WriteFeed(temperature, pinStates)
        time.sleep(20)
        Relays.HeaterOff()
        Relays.JetsOff()
        Relays.LightOn()
        Relays.ColdBlowerOn()
        Relays.HotBlowerOn()
        pinStates = Relays.GetAllStates()
        ThingSpeakLogger.WriteFeed(temperature, pinStates)
